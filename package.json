{
  "name": "codepod",
  "displayName": "CodePod",
  "description": "Generate podcast scripts from your code using AI.",
  "version": "0.1.3",
  "publisher": "AnkyKongStudios",
  "engines": {
    "vscode": "^1.78.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ankykong/codepod.git"
  },
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "codepod.generatePodcast",
        "title": "CodePod: Generate Podcast Script"
      }
    ],
    "configuration": {
      "title": "CodePod",
      "properties": {
        "codepod.aiProvider": {
          "type": "string",
          "enum": ["gemini", "openai", "claude", "ollama"],
          "enumDescriptions": [
            "Google's Gemini AI",
            "OpenAI's GPT models",
            "Anthropic's Claude models",
            "Local Ollama models"
          ],
          "default": "gemini",
          "description": "Select the AI provider to use for generating podcast scripts."
        },
        "codepod.voiceProvider": {
          "type": "string",
          "enum": ["elevenlabs", "deepgram", "playht", "cartesia"],
          "enumDescriptions": [
            "ElevenLabs voice synthesis",
            "Deepgram voice synthesis",
            "PlayHT voice synthesis",
            "Cartesia voice synthesis"
          ],
          "default": "elevenlabs",
          "description": "Select the voice provider to use for generating podcast audio."
        },
        "codepod.geminiApiKey": {
          "type": "string",
          "description": "Your Gemini API key."
        },
        "codepod.geminiModel": {
          "type": "string",
          "enum": [
            "gemini-2.0-flash",
            "gemini-2.0-flash-lite",
            "gemini-2.0-pro-exp-02-05",
            "gemini-2.0-flash-thinking-exp-01-21",
            "gemini-2.0-flash-exp"
          ],
          "default": "gemini-2.0-flash",
          "description": "Select the Gemini model to use."
        },
        "codepod.openaiApiKey": {
          "type": "string",
          "description": "Your OpenAI API key."
        },
        "codepod.openaiModel": {
          "type": "string",
          "enum": [
            "gpt-4o",
            "o1-mini",
            "o3-mini",
            "o1",
            "gpt-4.5-preview",
            "gpt-4o-mini"
          ],
          "default": "gpt-4o",
          "description": "Select the OpenAI model to use."
        },
        "codepod.claudeApiKey": {
          "type": "string",
          "description": "Your Anthropic Claude API key."
        },
        "codepod.claudeModel": {
          "type": "string",
          "enum": [
            "claude-3-7-sonnet-latest",
            "claude-3-5-haiku-latest",
            "claude-3-5-sonnet-latest",
            "claude-3-opus-latest",
            "claude-3-haiku-20240307"
          ],
          "default": "claude-3-5-sonnet-latest",
          "description": "Select the Claude model to use."
        },
        "codepod.ollamaModel": {
          "type": "string",
          "enum": [
            "gemma3",
            "qwq",
            "deepseek-r1",
            "llama3.3",
            "phi4",
            "llama3.2",
            "llama3.1",
            "llama3"
          ],
          "default": "llama3",
          "description": "Select the Ollama model to use."
        },
        "codepod.elevenLabsApiKey": {
          "type": "string",
          "description": "Your Eleven Labs API key."
        },
        "codepod.host1VoiceId": {
          "type": "string",
          "description": "Voice ID for Host1 from Eleven Labs.",
          "default": "21m00Tcm4TlvDq8ikWAM"
        },
        "codepod.host2VoiceId": {
          "type": "string",
          "description": "Voice ID for Host2 from Eleven Labs.",
          "default": "AZnzlk1XvdvUeBnXmlld"
        },
        "codepod.deepgramApiKey": {
          "type": "string",
          "description": "Your Deepgram API key."
        },
        "codepod.deepgramHost1VoiceId": {
          "type": "string",
          "description": "Voice ID for Host1 from Deepgram.",
          "default": "aura-billie-realistic"
        },
        "codepod.deepgramHost2VoiceId": {
          "type": "string",
          "description": "Voice ID for Host2 from Deepgram.",
          "default": "aura-eddie-realistic"
        },
        "codepod.playhtApiKey": {
          "type": "string",
          "description": "Your PlayHT API key."
        },
        "codepod.playhtUserId": {
          "type": "string",
          "description": "Your PlayHT User ID."
        },
        "codepod.playhtHost1VoiceId": {
          "type": "string",
          "description": "Voice ID for Host1 from PlayHT.",
          "default": "s3://voice-cloning-zero-shot/d9ff78ba-d016-47f6-b0ef-dd630f59414e/female-voice/manifest.json"
        },
        "codepod.playhtHost2VoiceId": {
          "type": "string",
          "description": "Voice ID for Host2 from PlayHT.",
          "default": "s3://voice-cloning-zero-shot/11labs/en-US/male/matthew/manifest.json"
        },
        "codepod.cartesiaApiKey": {
          "type": "string",
          "description": "Your Cartesia API key."
        },
        "codepod.cartesiaHost1VoiceId": {
          "type": "string",
          "description": "Voice ID for Host1 from Cartesia.",
          "default": "en-US-AmberNeural"
        },
        "codepod.cartesiaHost2VoiceId": {
          "type": "string",
          "description": "Voice ID for Host2 from Cartesia.",
          "default": "en-US-BrianNeural"
        },
        "codepod.customPrompt": {
          "type": "string",
          "description": "Custom prompt template for generating podcast scripts. Use {code} as a placeholder for the code snippet.",
          "default": "You are a podcast script writer that is extremely adept in coding. You understand nuances in code and areas where code could occur. You will make a podcast script about the code given and will add in natural umms, ahhs, etc. Also, you will add in interjections that are natural in a podcast. Lastly, you will give a high level overview of the code and then go into the nitty gritty details to find potential issues. Make sure that one host is questioning the other to come up with responses as to why things may work or not work. Lastly, write out only the script, with no music interludes and make each line either start with 'Host1:' or 'Host2:'"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/fluent-ffmpeg": "^2.1.27",
    "@types/node": "18.x",
    "@types/vscode": "^1.78.0",
    "@typescript-eslint/eslint-plugin": "^5.59.8",
    "@typescript-eslint/parser": "^5.59.8",
    "@vscode/test-electron": "^2.3.2",
    "eslint": "^8.41.0",
    "fluent-ffmpeg": "^2.1.3",
    "typescript": "^5.1.3"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.0",
    "@anthropic-ai/sdk": "^0.39.0",
    "openai": "^4.87.3",
    "ollama": "^0.5.14",
    "elevenlabs": "1.54.0",
    "@deepgram/sdk": "^3.11.2",
    "playht": "^0.16.0",
    "@cartesia/cartesia-js": "^2.1.10"
  }
}
